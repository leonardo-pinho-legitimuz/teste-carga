name: Notify on Backport Conflicts
on:
  pull_request:
    types: [opened]
    branches:
      - develop

permissions:
  contents: read
  pull-requests: write

jobs:
  check-for-conflict-comments:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.title, 'Backport') && github.event.pull_request.draft == true
    steps:
      - uses: actions/checkout@v4

      - name: Find conflict markers and notify authors
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_MERGE_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const prBody = pr.body;

            if (pr.draft && prBody.includes('Conflicts Detected')) {
              console.log('This appears to be a backport PR with conflicts');

              const files = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              let conflictInfo = '';
              let mentionedAuthors = new Set();

              for (const file of files.data) {
                const fileContent = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: file.filename,
                  ref: pr.head.ref
                });

                const content = Buffer.from(fileContent.data.content, 'base64').toString();

                if (content.includes('<<<<<<<') || content.includes('=======') || content.includes('>>>>>>>')) {
                  console.log(`Found conflict markers in ${file.filename}`);

                  conflictInfo += `\n- \`${file.filename}\` has conflict markers\n`;

                  try {
                    const reviewerSection = prBody.match(/## People to Review\s+([\s\S]*?)(?:\n#|$)/);
                    if (reviewerSection && reviewerSection[1]) {
                      const mentionedUsers = reviewerSection[1].match(/@\w+/g);
                      if (mentionedUsers) {
                        mentionedUsers.forEach(user => {
                          mentionedAuthors.add(user);
                        });
                      }
                    }
                  } catch (e) {
                    console.error('Error parsing reviewers:', e);
                  }
                }
              }

              if (mentionedAuthors.size === 0) {
                mentionedAuthors.add(`@${pr.user.login}`);
              }

              if (conflictInfo) {
                const authorMentions = Array.from(mentionedAuthors).join(' ');
                const comment = `# Backport Conflicts Need Resolution\n\n${authorMentions} - This backport PR has conflicts that need to be resolved manually:\n\n${conflictInfo}\n\nPlease resolve these conflicts and mark the PR as ready for review when done.`;

                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: comment
                });

                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['has-conflicts']
                });
              }
            }
